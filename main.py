# main.py

import os
import time
from github_analysis.repo_checker import check_repo_status
from github_analysis.file_analyzer import analyze_python_files
from twitter_analysis.user_analyzer import analyze_twitter_user
from ai_detection.analyzer import detect_ai_content
from core.security_checks import check_security_risks
from utils.logger import setup_logger
from utils.token_manager import get_github_token
from config import TWITTER_CONSUMER_KEY, TWITTER_CONSUMER_SECRET, TWITTER_ACCESS_TOKEN, TWITTER_ACCESS_TOKEN_SECRET, AI_MODEL_NAME
from github import Github
import tweepy

def main():
    logger = setup_logger()
    logger.info("Starting ChainMag AI detection and analysis.")

    # GitHub Analysis
    github_repo = "octocat/Hello-World"
    github_token = get_github_token()
    repo_status = check_repo_status(github_repo, github_token)
    
    if repo_status:
        logger.info(f"Repository {github_repo} exists. Proceeding with analysis...")
        g = Github(github_token)
        repo = g.get_repo(github_repo)
        contents = repo.get_contents("")
        analyze_python_files(repo, contents)
        check_security_in_repo(repo)
    else:
        logger.warning(f"Repository {github_repo} does not exist. Skipping GitHub analysis.")
    
    # Twitter Analysis
    twitter_user = "jack"
    analyze_twitter_user(twitter_user, count=5)
    
    # AI Content Detection
    ai_texts = [
        "This is a sample text generated by AI model.",
        "Humans usually write with a more natural flow and complexity.",
        "AI-generated texts can often be identified by specific patterns.",
    ]
    for text in ai_texts:
        ai_detection_result = detect_ai_content(text)
        logger.info(f"AI Detection Result for '{text}': {ai_detection_result}")
    
    # Security Risk Analysis
    project_name = "ChainMag AI"
    security_risks = check_security_risks(project_name)
    logger.info(f"Security Check for {project_name}: {security_risks}")
    
    logger.info("Scanning for sensitive data (API keys, passwords, etc.) in the repository...")
    scan_sensitive_data_in_repo(repo)

    logger.info("Analysis complete.")

def check_security_in_repo(repo):
    logger = setup_logger()
    logger.info(f"Performing advanced security analysis on repository {repo.name}")
    
    sensitive_keywords = ["API_KEY", "SECRET", "password"]
    for content_file in repo.get_contents(""):
        if content_file.name.endswith(".py"):
            file_content = repo.get_contents(content_file.path).decoded_content.decode()
            for keyword in sensitive_keywords:
                if keyword in file_content:
                    logger.warning(f"Sensitive data found in {content_file.name}: {keyword}")
                else:
                    logger.info(f"No sensitive data found in {content_file.name}.")

def scan_sensitive_data_in_repo(repo):
    logger = setup_logger()
    logger.info(f"Scanning repository {repo.name} for sensitive data...")
    
    secrets_found = False
    for content_file in repo.get_contents(""):
        if content_file.name.endswith(".py"):
            file_content = repo.get_contents(content_file.path).decoded_content.decode()
            if "API_KEY" in file_content or "SECRET" in file_content:
                logger.warning(f"Sensitive information found in {content_file.name}")
                secrets_found = True
    
    if not secrets_found:
        logger.info(f"No sensitive data found in {repo.name}.")
    else:
        logger.info("Sensitive data scanning completed.")

def analyze_twitter_user(username, count=10):
    api = authenticate_twitter()
    tweets = api.user_timeline(screen_name=username, count=count)
    tweet_count = len(tweets)
    
    print(f"\nUser {username} has {tweet_count} tweets.")
    
    for tweet in tweets:
        print(f"Tweet: {tweet.text}")
        print(f"Analysis: {analyze_tweet(tweet.text)}")
    
    if tweet_count > 5:
        print(f"User {username} is tweeting frequently, potential bot activity detected.")

def authenticate_twitter():
    auth = tweepy.OAuthHandler(TWITTER_CONSUMER_KEY, TWITTER_CONSUMER_SECRET)
    auth.set_access_token(TWITTER_ACCESS_TOKEN, TWITTER_ACCESS_TOKEN_SECRET)
    return tweepy.API(auth)

def analyze_tweet(tweet):
    if "AI" in tweet or "bot" in tweet:
        return "This tweet seems to be related to AI or bots."
    return "This tweet seems human-generated."

if __name__ == "__main__":
    main()
